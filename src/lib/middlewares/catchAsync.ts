import { NextRequest, NextResponse } from 'next/server';
import { ZodError } from 'zod';

// ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡¶æ‡¶á‡¶™ ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ
type ControllerFunction = (request: NextRequest, params: any) => Promise<any>;

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§
 * ‡¶è‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° JSON ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç
 * ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶è‡¶∞‡¶∞ ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°‡¶∏‡¶π ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§
 * @param fn ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
 * @param successMessage ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶Ø‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
 * @param successStatus ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶Ø‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
 */
export const catchAsync = (
  fn: ControllerFunction,
  successMessage: string = 'Operation successful!',
  successStatus: number = 200
) => {
  return async (request: NextRequest, params: any) => {
    try {
      // ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
      const result = await fn(request, params);

      // ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá, ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø
      return NextResponse.json(
        {
          success: true,
          message: successMessage,
          data: result,
        },
        { status: successStatus }
      );
    } catch (error: any) {
      // Zod ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶è‡¶∞‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
      if (error instanceof ZodError) {
        return NextResponse.json(
          {
            success: false,
            message: 'Validation Error',
            errors: error.issues.map((issue) => ({
              field: issue.path.join('.'),
              message: issue.message,
            })),
          },
          { status: 400 } // Bad Request
        );
      }

      // ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶è‡¶∞‡¶∞ (‡¶Ø‡ßá‡¶Æ‡¶®: 'Invalid credentials', 'User already exists') ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
      if (error.statusCode) {
        return NextResponse.json(
          { success: false, message: error.message },
          { status: error.statusCode }
        );
      }

      // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      console.error('üí• UNHANDLED API ERROR:', error);
      return NextResponse.json(
        { success: false, message: 'An internal server error occurred.' },
        { status: 500 } // Internal Server Error
      );
    }
  };
};